package sbnz.integracija;

import java.lang.Math;
import java.time.LocalDate;

import sbnz.integracija.example.model.Therapy;
import sbnz.integracija.example.model.Patient;
import sbnz.integracija.example.model.Appointment;
import sbnz.integracija.example.model.Illness;
import sbnz.integracija.example.model.Diagnosis;
import sbnz.integracija.example.model.JointMotionRange;
import sbnz.integracija.example.model.enums.PhysicalActivity;
import sbnz.integracija.example.model.enums.TherapyType;
import sbnz.integracija.example.model.enums.Symptom;

rule "Therapy - KINESI"
	agenda-group "therapy"
	salience 2
    when
    	$a: Appointment(diagnosis.illness != null, resolved == false, $flexionScore: getScoreOfLastJmr(), $flexionScore <= 2, $diagnosisId: diagnosis.id )
    	$d: Diagnosis(id == $diagnosisId, testResult!=null, (testResult.score > 1 || testResult.score == 0), $patientId: patient.id, $illnessId: illness.id)
        $i: Illness(id == $illnessId, $symptoms: symptoms )
        $p: Patient(id == $patientId, $age: age, $physicalActivity: physicalActivity, $medicalHistory: medicalHistory)
        Number($value : intValue == 0) from accumulate(
        	Symptom($t:this, name == "BONE FRACTURE") from $symptoms,
        	count($t)
        )
        $minutesActiveTherapyTotal: Number() from accumulate(
         	Diagnosis($d: this, $therapies: therapyList, $therapies != null) from $medicalHistory and
         	$activeTherapies: List(size > 0) from collect(
         		Therapy(endDate == null, therapyType != TherapyType.ELECTRIC_THERAPY) from $therapies
         	),
         	$minutesPerDiagnosis: Number() from accumulate(
	    		Therapy($minutes: minutes) from $activeTherapies,
				sum($minutes)
	    	)
         	sum($minutesPerDiagnosis)
         )
        eval( Math.ceil($minutesActiveTherapyTotal + $age/2) <= 150 )
    then
        System.out.println("Set therapy - KINESI");
        System.out.println("Appointment resolved");
        System.out.println("///////////////////////////////////////////////////");
        modify ($a) { setResolved(true); }
        modify ($d) { addTherapy(new Therapy(TherapyType.KINESI_THERAPY, $score * 15 * $physicalActivity.getActivityValue())); }
end

rule "Therapy - POOL"
	agenda-group "therapy"
	salience 2
    when
    	$a: Appointment(diagnosis.illness != null, resolved == false, $flexionScore: getScoreOfLastJmr(), $flexionScore >= 2, $diagnosisId: diagnosis.id)
    	$d: Diagnosis(id == $diagnosisId, testResult!=null, (testResult.score > 1 || testResult.score == 0), $patientId: patient.id)
        $p: Patient(id == $patientId, $age: age, $physicalActivity: physicalActivityy, $medicalHistory: medicalHistory )

        $minutesActiveTherapyTotal: Number() from accumulate(
         	Diagnosis($d: this, $therapies: therapyList, $therapies != null) from $medicalHistory and
         	$activeTherapies: List(size > 0) from collect(
         		Therapy(endDate == null, therapyType == TherapyType.POOL_THERAPY) from $therapies
         	),
         	$minutesPerDiagnosis: Number() from accumulate(
	    		Therapy($minutes: minutes) from $activeTherapies,
				sum($minutes)
	    	)
         	sum($minutesPerDiagnosis)
         )
        eval( Math.ceil($minutesActiveTherapyTotal + $age/2) <= 120 )
    then
        System.out.println("Set therapy - POOL");
        System.out.println("Appointment resolved");
        System.out.println("///////////////////////////////////////////////////");
        modify ($a) { setResolved(true); }
        modify ($d) { addTherapy(new Therapy(TherapyType.POOL_THERAPY, $score * 10 * $physicalActivity.getActivityValue())); }
end

rule "Therapy - ELECTRIC"
	agenda-group "therapy"
	salience 2
    when
    	$a: Appointment(diagnosis.illness != null, resolved == false, $flexionScore: getScoreOfLastJmr(), $flexionScore >= 2, $diagnosisId: diagnosis.id)
    	$d: Diagnosis(id == $diagnosisId, testResult!=null, (testResult.score > 1 || testResult.score == 0), $patientId: patient.id)
        $p: Patient(id == $patientId, $age: age, $medicalHistory: medicalHistory )

        accumulate(
         	Diagnosis($d: this, $therapies: therapyList, $therapies != null) from $medicalHistory,
         	Number(intValue == 0) from accumulate(
         		Therapy($t: this, therapyType == TherapyType.ELECTRIC_THERAPY,
         		 $therapyEndDate: startDate.plusDays(14),
         		  $therapyEndDate.isAfter(LocalDate.now().minusDays(15))) from $therapies,
         		count($t)
         	)
         )
    then
        System.out.println("Set therapy - ELECTRIC");
        System.out.println("Appointment resolved");
        System.out.println("///////////////////////////////////////////////////");
        modify ($a) { setResolved(true); }
        modify ($d) { addTherapy(new Therapy(TherapyType.ELECTRIC_THERAPY, $score * 10); }
end

rule "No Therapy"
	agenda-group "therapy"
	salience 1
    when
    	$a: Appointment(diagnosis.illness != null, jointMotionRange != null, resolved == false, $diagnosisId: diagnosis.id)
    	$d: Diagnosis(id == $diagnosisId, testResult!=null, testResult.score == 1)

    then
        modify ($a) { setResolved(true); }
        System.out.println("No therapy required when test results show no risk.");
        System.out.println("Appointment resolved");
        System.out.println("///////////////////////////////////////////////////");
end
