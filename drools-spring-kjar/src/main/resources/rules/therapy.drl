package rules;

import java.util.List;
import java.lang.Math;
import java.lang.Double;
import java.time.LocalDate;

import sbnz.integracija.example.model.Therapy;
import sbnz.integracija.example.model.Patient;
import sbnz.integracija.example.model.Appointment;
import sbnz.integracija.example.model.Illness;
import sbnz.integracija.example.model.Diagnosis;
import sbnz.integracija.example.model.JointMotionRange;
import sbnz.integracija.example.model.PhysicalActivity;
import sbnz.integracija.example.model.TherapyType;
import sbnz.integracija.example.model.TestResult;
import sbnz.integracija.example.model.Symptom;


rule "Therapy - KINESI"
	agenda-group "therapy"
	salience 3
    when
    	$a: Appointment( resolved == false, $flexionScore: diagnosis.getScoreOfLastJmr(), $flexionScore <= 2, $diagnosisId : diagnosis.id )
    	$d: Diagnosis(id == $diagnosisId,  $testResultId : testResult.id, $patientId : patient.id, $illnessId: illness.id)
        $t: TestResult(id == $testResultId, (score > 1 || score == 0))
        $i: Illness(id == $illnessId, $symptoms : illnessSymptoms )
        $p: Patient(id == $patientId, $age : age, $physicalActivity : physicalActivity, $medicalHistory : medicalHistory)
        Number($value : intValue == 0) from accumulate(
        	Symptom($s:this, name == "BONE FRACTURE") from $symptoms,
        	count($s)
        )
        $minutesActiveTherapyTotal : Double() from accumulate(
         	Diagnosis($diagnosis: this, $therapies: therapyList, $therapies.size() > 0) from $medicalHistory and
         	$activeTherapies: List(size > 0) from collect(
         		Therapy($th:this, endDate == null, therapyType != TherapyType.ELECTRIC_THERAPY) from $therapies
         	) and
         	$minutesPerDiagnosis : Number() from accumulate(
	    		Therapy($minutes : minutes) from $activeTherapies,
				sum($minutes)
	    	),
         	sum($minutesPerDiagnosis)
         )
        eval( Math.ceil($minutesActiveTherapyTotal + $age/2) <= 150 )
    then
        modify ($a) { setResolved(true); }
        modify ($d) { addTherapy(new Therapy(TherapyType.KINESI_THERAPY, $flexionScore * 15 * $physicalActivity.getActivityValue())); }
        System.out.println("Set therapy - KINESI");
        System.out.println("Appointment resolved");
        System.out.println("///////////////////////////////////////////////////");
end


rule "Therapy - POOL"
	agenda-group "therapy"
	salience 3
    when
    	$a: Appointment($illnessId: diagnosis.illness.id, resolved == false, $flexionScore: diagnosis.getScoreOfLastJmr(), $flexionScore >= 2, $diagnosisId : diagnosis.id)
    	$d: Diagnosis(id == $diagnosisId, $testResultId : testResult.id, $patientId : patient.id)
    	$t: TestResult(id == $testResultId, (score > 1 || score == 0))
        $p: Patient(id == $patientId, $age : age, $physicalActivity : physicalActivity, $medicalHistory: medicalHistory )

        $minutesActiveTherapyTotal: Double() from accumulate(
         	Diagnosis($diagnosis: this, $therapies: therapyList, $therapies.size() > 0) from $medicalHistory and
         	$activeTherapies: List(size > 0) from collect(
         		Therapy($therapy:this, endDate == null, therapyType == TherapyType.POOL_THERAPY) from $therapies
         	) and
         	$minutesPerDiagnosis : Number() from accumulate(
	    		Therapy($minutes: minutes) from $activeTherapies,
				sum($minutes)
	    	),
         	sum($minutesPerDiagnosis)
         )
        eval( Math.ceil($minutesActiveTherapyTotal + $age/2) <= 120 )
    then
        modify ($a) { setResolved(true); }
        modify ($d) { addTherapy(new Therapy(TherapyType.POOL_THERAPY, $flexionScore * 10 * $physicalActivity.getActivityValue())); }
        System.out.println("Set therapy - POOL");
        System.out.println("Appointment resolved");
        System.out.println("///////////////////////////////////////////////////");
end


rule "Therapy - ELECTRIC"
	agenda-group "therapy"
	salience 2
    when
    	$a: Appointment($illnessId: diagnosis.illness.id, resolved == false, $flexionScore: diagnosis.getScoreOfLastJmr(), $flexionScore >= 2, $diagnosisId: diagnosis.id)
    	$d: Diagnosis(id == $diagnosisId, $testResultId : testResult.id, $patientId: patient.id)
    	$t: TestResult(id == $testResultId, (score > 1 || score == 0))
        $p: Patient(id == $patientId, $medicalHistory: medicalHistory )

        Number($value: intValue == 0) from accumulate(
            Diagnosis($diagnosis: this, $therapies: therapyList, $therapies.size() > 0) from $medicalHistory and
            $activeTherapies : Number() from accumulate(
                Therapy($therapy: this, therapyType == TherapyType.ELECTRIC_THERAPY,
                 $therapyEndDate: startDate.plusDays(14),
                  $therapyEndDate.isAfter(LocalDate.now().minusDays(15))) from $therapies,
                count($therapy)
            ),
            sum($activeTherapies)
         )
    then
        modify ($a) { setResolved(true); }
        modify ($d) { addTherapy(new Therapy(TherapyType.ELECTRIC_THERAPY, $flexionScore * 10)); }
        System.out.println("Set therapy - ELECTRIC");
        System.out.println("Appointment resolved");
        System.out.println("///////////////////////////////////////////////////");

end


rule "No Therapy"
	agenda-group "therapy"
	salience 1
    when
    	$a: Appointment( resolved == false, $diagnosisId: diagnosis.id, $illnessId: diagnosis.illness.id )
    	$d: Diagnosis(id == $diagnosisId, $testResultId : testResult.id)
        $t: TestResult(id == $testResultId, score == 1)
    then
        modify ($a) { setResolved(true); }
        System.out.println("No therapy required when test results show no risk.");
        System.out.println("Appointment resolved");
        System.out.println("///////////////////////////////////////////////////");
end

